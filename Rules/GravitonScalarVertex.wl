(* ::Package:: *)

SetDirectory[DirectoryName[$InputFileName]];


BeginPackage["GravitonScalarVertex`",{"FeynCalc`","CTensorGeneral`","indexArraySymmetrization`"}];


GravitonScalarVertex::usage = "GravitonScalarVertex[{\!\(\*SubscriptBox[\(\[Rho]\), \(1\)]\),\!\(\*SubscriptBox[\(\[Sigma]\), \(1\)]\),\[Ellipsis],\!\(\*SubscriptBox[\(\[Rho]\), \(n\)]\),\!\(\*SubscriptBox[\(\[Sigma]\), \(n\)]\)},\!\(\*SubscriptBox[\(p\), \(1\)]\),\!\(\*SubscriptBox[\(p\), \(2\)]\),m]. The function returns an expression for the gravitational vertex of a scalar field kinetic energy. Here {\!\(\*SubscriptBox[\(\[Rho]\), \(i\)]\),\!\(\*SubscriptBox[\(\[Sigma]\), \(i\)]\)} are gravitons Lorentz indices, \!\(\*SubscriptBox[\(p\), \(i\)]\) are scalar field momenta, and m is the scalar field mass.";


GravitonScalarPotentialVertex::usage = "GravitonScalarPotentialVertex[{\!\(\*SubscriptBox[\(\[Rho]\), \(1\)]\),\!\(\*SubscriptBox[\(\[Sigma]\), \(1\)]\),\[Ellipsis],\!\(\*SubscriptBox[\(\[Rho]\), \(n\)]\),\!\(\*SubscriptBox[\(\[Sigma]\), \(n\)]\)},\!\(\*SubscriptBox[\(\[Lambda]\), \(p\)]\)]. The function The function returns an expression for the gravitational vertex of a scalar field potential energy. Here {\!\(\*SubscriptBox[\(\[Rho]\), \(i\)]\),\!\(\*SubscriptBox[\(\[Sigma]\), \(i\)]\)} are graviton Lorentz indices and \!\(\*SubscriptBox[\(\[Lambda]\), \(p\)]\) is the scalar field interaction couplign.";


Begin["Private`"];


(* GravitonScalarVertex = {indexArray,p1,p2,m} |-> I (Global`\[Kappa])^(Length[indexArray]/2) ( - (1/2) Contract[(FVD[p1,\[ScriptM]]FVD[p2,\[ScriptN]]+FVD[p1,\[ScriptN]]FVD[p2,\[ScriptM]])CITensor[{\[ScriptM],\[ScriptN]},indexArray]] - m^2 FeynCalcInternal[CTensor[indexArray]] ) //Expand; *)


(* GravitonScalarPotentialVertex = {indexArray,\[Lambda]}|-> I (Global`\[Kappa])^(Length[indexArray]/2) \[Lambda] FeynCalcInternal[CTensor[indexArray]] //Expand; *)


(* The code is generated by ChatGPT. *)
(* The code only uses CTensorGeneral *)

(* Initialize the lookup table *)
ClearAll[GravitonScalarVertexLookup];
GravitonScalarVertexLookup = <||>;

(* Define a function to generate a unique key from the function's inputs *)
CreateLookupKey[indexArray_, p1_, p2_, m_] := StringJoin[ ToString[indexArray], "_",ToString[p1], "_", ToString[p2], "_", ToString[m] ];

(* Rewrite the GravitonScalarVertex function to use the lookup table *)
GravitonScalarVertex[indexArray_, p1_, p2_, m_] := Module[{key, result},
	key = CreateLookupKey[indexArray, p1, p2, m];
	
	(* Check if the result is already in the lookup table *)
	If[KeyExistsQ[GravitonScalarVertexLookup, key],
	(* If yes, retrieve the result from the lookup table *)
		GravitonScalarVertexLookup[key],
	(* If not, compute the result and store it in the lookup table for future use *)
		result = I (Global`\[Kappa])^(Length[indexArray]/2) ( - (1/2) Contract[(FVD[p1, \[ScriptM]] FVD[p2, \[ScriptN]] + FVD[p1, \[ScriptN]] FVD[p2, \[ScriptM]]) CTensorGeneral[{\[ScriptM], \[ScriptN]}, indexArray]]  - m^2 FeynCalcInternal[CTensorGeneral[{},indexArray]] ) // Expand;
		GravitonScalarVertexLookup[key] = result;
		result
	]
];


(* The code is generated by ChatGPT. *)
(* The code only uses CTensorGeneral *)

(* Initialize the lookup table *)
ClearAll[GravitonScalarPotentialVertexLookup];
GravitonScalarPotentialVertexLookup = <||>;

(* Define a function to generate a unique key from the function's inputs *)
CreateLookupKeyPotential[indexArray_, lambda_] := StringJoin[ToString[indexArray], "_", ToString[lambda]];

(* Rewrite the GravitonScalarPotentialVertex function to use the lookup table *)
GravitonScalarPotentialVertex[indexArray_, lambda_] := Module[{key, result},
	key = CreateLookupKeyPotential[indexArray, lambda];
	
	(* Check if the result is already in the lookup table *)
	If[KeyExistsQ[GravitonScalarPotentialVertexLookup, key],
		(* If yes, retrieve the result from the lookup table *)
		GravitonScalarPotentialVertexLookup[key],
		(* If not, compute the result and store it in the lookup table for future use *)
		result = I (Global`\[Kappa])^(Length[indexArray]/2) lambda FeynCalcInternal[CTensorGeneral[{},indexArray]] // Expand;
		GravitonScalarPotentialVertexLookup[key] = result;
		result
    ]
];


End[];


EndPackage[];
